snippet template "Basic template" b
\documentclass[letter]{article}

\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{textcomp}
\usepackage[english]{babel}
\usepackage{amsmath, amssymb}


% figure support
\usepackage{import}
\usepackage{xifthen}
\pdfminorversion=7
\usepackage{pdfpages}
\usepackage{transparent}
\newcommand{\incfig}[1]{%
  \def\svgwidth{\columnwidth}
  \import{./figures/}{#1.pdf_tex}
}

\pdfsuppresswarningpagegroup=1

\begin{document}
  $0
\end{document}
endsnippet

snippet beg "begin{} / end{}" bA
\\begin{$1}
  $0
\\end{$1}
endsnippet

priority 100
snippet ... "ldots" iA
\ldots
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
  \centering
  \caption{${2:caption}}
  \label{tab:${3:label}}
  \begin{tabular}{${5:c}}
  $0${5/((?<=.)c|l|r)|./(?1: & )/g}
  \end{tabular}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
  \centering
  ${2:\includegraphics[width=0.8\textwidth]{$3}}
  \caption{${4:$3}}
  \label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet enum "Enumerate" bA
\begin{enumerate}
  \item $0
\end{enumerate}
endsnippet

snippet item "Itemize" bA
\begin{itemize}
  \item $0
\end{itemize}
endsnippet

snippet desc "Description" b
\begin{description}
  \item[$1] $0
\end{description}
endsnippet

snippet pac "Package" b
\usepackage[${1:options}]{${2:package}}$0
endsnippet

snippet => "implies" Ai
\implies
endsnippet

snippet =< "implied by" Ai
\impliedby
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
  snip.rv = ' '
else:
  snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
${1:${VISUAL}}
.\] $0
endsnippet

snippet ali "Align" bA
\begin{align*}
  ${1:${VISUAL}}
.\end{align*}
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet


snippet sympy "sympyblock " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

priority 1000
snippet math "mathematicablock" w
math $1 math$0
endsnippet

priority 10000
snippet 'math(.*)math' "math" wr
`!p
import subprocess
code = match.group(1)
code = 'ToString[' + code + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet


snippet plot "Plot" w
\begin{figure}[$1]
  \centering
  \begin{tikzpicture}
    \begin{axis}[
      xmin= ${2:-10}, xmax= ${3:10},
      ymin= ${4:-10}, ymax = ${5:10},
      axis lines = middle,
    ]
      \addplot[domain=$2:$3, samples=${6:100}]{$7};
    \end{axis}
  \end{tikzpicture}
  \caption{$8}
  \label{${9:$8}}
\end{figure}
endsnippet

snippet nn "Tikz node" w
\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
$0
endsnippet

# vim:ft=snippets
